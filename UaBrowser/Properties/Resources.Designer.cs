//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Workstation.UaBrowser.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Workstation.UaBrowser.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     &apos;&apos;&apos; &lt;summary&gt;
        ///    &apos;&apos;&apos; Gets the event of $fullName$.
        ///    &apos;&apos;&apos; &lt;/summary&gt;
        ///    &lt;MonitoredItem(nodeId: &quot;$nodeId$&quot;, attributeId: AttributeIds.EventNotifier)&gt;
        ///    Public Property $fullName$() As $dataType$
        ///    Get
        ///        Return _$fullName$
        ///    End Get
        ///    Private Set(ByVal value As $dataType$)
        ///        SetProperty(_$fullName$, value)
        ///    End Set
        ///    End Property
        ///
        ///    Private _$fullName$ As $dataType$
        ///.
        /// </summary>
        internal static string EventFormatBasic {
            get {
                return ResourceManager.GetString("EventFormatBasic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to         /// &lt;summary&gt;
        ///        /// Gets the event of $fullName$.
        ///        /// &lt;/summary&gt;
        ///        [MonitoredItem(nodeId: &quot;$nodeId$&quot;, attributeId: AttributeIds.EventNotifier)]
        ///        public $dataType$ $fullName$
        ///        {
        ///            get { return this._$fullName$; }
        ///            private set { this.SetProperty(ref this._$fullName$, value); }
        ///        }
        ///
        ///        private $dataType$ _$fullName$;
        ///.
        /// </summary>
        internal static string EventFormatCSharp {
            get {
                return ResourceManager.GetString("EventFormatCSharp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     &apos;&apos;&apos; &lt;summary&gt;
        ///    &apos;&apos;&apos; Invokes the method $fullName$
        ///    &apos;&apos;&apos; &lt;/summary&gt;
        ///    &apos;&apos;&apos; &lt;returns&gt;A &lt;see cref=&quot;Task&quot;/&gt; that returns the output arguments.&lt;/returns&gt;
        ///    Public Async Function $fullName$($parameters$) As  $returnType$
        ///
        ///        Dim response As CallResponse = Await Me.InnerChannel.CallAsync(New CallRequest With
        ///            {
        ///               .MethodsToCall =
        ///                {
        ///                    New CallMethodRequest With
        ///                    {
        ///                        .ObjectId = NodeId.Parse [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MethodFormatBasic {
            get {
                return ResourceManager.GetString("MethodFormatBasic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to         /// &lt;summary&gt;
        ///        /// Invokes the method $fullName$.
        ///        /// &lt;/summary&gt;
        ///        /// &lt;returns&gt;A &lt;see cref=&quot;Task&quot;/&gt; that returns the output arguments.&lt;/returns&gt;
        ///        public async $returnType$ $fullName$($parameters$)
        ///        {
        ///            var response = await this.InnerChannel.CallAsync(new CallRequest
        ///            {
        ///               MethodsToCall = new[]
        ///                {
        ///                    new CallMethodRequest
        ///                    {
        ///                        ObjectId = NodeId.Pars [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MethodFormatCSharp {
            get {
                return ResourceManager.GetString("MethodFormatCSharp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     &apos;&apos;&apos; &lt;summary&gt;
        ///    &apos;&apos;&apos; Gets the value of $fullName$.
        ///    &apos;&apos;&apos; &lt;/summary&gt;
        ///    &lt;MonitoredItem(nodeId: &quot;$nodeId$&quot;)&gt;
        ///    Public Property $fullName$() As $dataType$
        ///    Get
        ///        Return _$fullName$
        ///    End Get
        ///    Private Set(ByVal value As $dataType$)
        ///        SetProperty(_$fullName$, value)
        ///    End Set
        ///    End Property
        ///
        ///    Private _$fullName$ As $dataType$
        ///.
        /// </summary>
        internal static string ReadOnlyValueFormatBasic {
            get {
                return ResourceManager.GetString("ReadOnlyValueFormatBasic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to         /// &lt;summary&gt;
        ///        /// Gets the value of $fullName$.
        ///        /// &lt;/summary&gt;
        ///        [MonitoredItem(nodeId: &quot;$nodeId$&quot;)]
        ///        public $dataType$ $fullName$
        ///        {
        ///            get { return this._$fullName$; }
        ///            private set { this.SetProperty(ref this._$fullName$, value); }
        ///        }
        ///
        ///        private $dataType$ _$fullName$;
        ///.
        /// </summary>
        internal static string ReadOnlyValueFormatCSharp {
            get {
                return ResourceManager.GetString("ReadOnlyValueFormatCSharp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to         [DataTypeId(&quot;$nodeId$&quot;)]
        ///        [BinaryEncodingId(&quot;$binaryEncodingId$&quot;)]
        ///        Public Class $dataType$
        ///            Inherits $baseType$
        ///
        ////*
        ///$element$
        ///*/
        ///
        ///            Public Sub Encode(ByVal encoder As IEncoder)
        ///                base.Encode(encoder);
        ///                encoder.PushNamespace(&quot;$targetNamespace$&quot;);
        ///                encoder.PopNamespace();
        ///            End Sub
        ///
        ///            Public Sub Decode(ByVal decoder As IDecoder)
        ///                base.Decode(decoder);
        ///                deco [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StructureFormatBasic {
            get {
                return ResourceManager.GetString("StructureFormatBasic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to         [DataTypeId(&quot;$nodeId$&quot;)]
        ///        [BinaryEncodingId(&quot;$binaryEncodingId$&quot;)]
        ///        public class $dataType$ : $baseType$
        ///        {
        ////*
        ///$element$
        ///*/
        ///
        ///            public override void Encode(IEncoder encoder)
        ///            {
        ///                base.Encode(encoder);
        ///                encoder.PushNamespace(&quot;$targetNamespace$&quot;);
        ///                encoder.PopNamespace();
        ///            }
        ///
        ///            public override void Decode(IDecoder decoder)
        ///            {
        ///                base.Decode(decoder);
        ///      [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StructureFormatCSharp {
            get {
                return ResourceManager.GetString("StructureFormatCSharp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     &apos;&apos;&apos; &lt;summary&gt;
        ///    &apos;&apos;&apos; Gets or sets the value of $fullName$.
        ///    &apos;&apos;&apos; &lt;/summary&gt;
        ///    &lt;MonitoredItem(nodeId: &quot;$nodeId$&quot;)&gt;
        ///    Public Property $fullName$() As $dataType$
        ///    Get
        ///        Return _$fullName$
        ///    End Get
        ///    Set(ByVal value As $dataType$)
        ///        SetProperty(_$fullName$, value)
        ///    End Set
        ///    End Property
        ///
        ///    Private _$fullName$ As $dataType$
        ///.
        /// </summary>
        internal static string ValueFormatBasic {
            get {
                return ResourceManager.GetString("ValueFormatBasic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to         /// &lt;summary&gt;
        ///        /// Gets or sets the value of $fullName$.
        ///        /// &lt;/summary&gt;
        ///        [MonitoredItem(nodeId: &quot;$nodeId$&quot;)]
        ///        public $dataType$ $fullName$
        ///        {
        ///            get { return this._$fullName$; }
        ///            set { this.SetProperty(ref this._$fullName$, value); }
        ///        }
        ///
        ///        private $dataType$ _$fullName$;
        ///.
        /// </summary>
        internal static string ValueFormatCSharp {
            get {
                return ResourceManager.GetString("ValueFormatCSharp", resourceCulture);
            }
        }
    }
}
